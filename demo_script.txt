# Ecto and Phoenix demo

git clone https://github.com/markryall/card_shark.git

cd card_shark

mix deps.get

# generate new model, controller, views, etc.
mix phoenix.gen.json Thing things name:string

# add 'resources "/things", ThingController' to router
vim web/router.ex

mix ecto.drop
mix ecto.create
mix ecto.migrate

ls -al priv/repo/migrations

mix phoenix.server

export CS_URL=http://127.0.0.1:4000/api

http $CS_URL/things
http post $CS_URL/things thing:='{}'
http post $CS_URL/things thing:='{"name":"thing 1"}'
http $CS_URL/things
http delete $CS_URL/things/1
http put $CS_URL/things/2 thing:='{"name":"thing 3"}'
http $CS_URL/things/2

curl $CS_URL/cards \
  -H 'Content-Type: application/json' \
  -X POST \
  -d @/dev/stdin <<JSON
{
  "card": {
    "summary": "manage cards",
    "detail": "crud operations for managing cards",
    "estimate": "1",
    "assignee": "1"
  }
}
JSON
http $CS_URL/cards
http $CS_URL/cards/1
http put $CS_URL/cards/1 card:='{"estimate":"3"}'
http $CS_URL/cards/1
http delete $CS_URL/cards/1
http $CS_URL/cards

iex -S mix phoenix.server

alias CardShark.Repo
alias CardShark.Thing

things = Repo.all Thing

changeset = Thing.changeset(%Thing{}, %{:name => "thing 1"})
changeset.valid?
thing = Repo.insert changeset

thing = Repo.get Thing, 1
thing.detail
thing.summary
thing.inserted_at

changeset = Thing.changeset(thing, %{:name => "thing a"})
changeset.valid?
thing = Repo.update changeset

Repo.delete thing

Repo.delete_all Thing

alias CardShark.Repo
alias CardShark.Card
alias CardShark.Project
import Ecto.Query
import Ecto.Model

changeset = Project.changeset(%Project{}, %{name: "card shark"})
project = Repo.insert changeset

changeset = Card.changeset(
  %Card{project_id: project.id},
  %{
    summary: "create association",
    detail: "cards should be linked to project",
    estimate: 3,
    assignee: 1
  }
)
changeset.valid?
card = Repo.insert changeset

[project|_] = Repo.all Project

query = from c in Card,
      where: c.id == ^card.id,
     select: c,
    preload: :project
[card] = Repo.all query

card = Repo.get Card, card.id
query = assoc(card, :project)
[project] = Repo.all query
query = assoc(project, :cards)
cards = Repo.all query
